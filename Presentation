String filePath = "";
boolean continueDraw = true;
boolean keyHasBeenPressed = false;
boolean quitFunction = false;
import org.gicentre.utils.stat.*;
BarChart barChart;
BarChart barChart2;
// GLOBAL VARIABLES END

//New objects of Car and SDP
Car vroom = new Car();
SensorDataProvider sdpx = new SensorDataProvider();

void settings()
{
  size(1400, 800);
}


void setup()
{
  background(0);
  Menu menu1 = new Menu();
  menu1.createMenu(width/4, height/4);
}


void draw ()
{
  if (filePath != "")
  {
      //Initializing
      background(0);
      frameRate(10);
      sdpx.Initialize(filePath);
      vroom.processInput(sdpx);
      
      
      //Speed
      float speed = vroom.trip_comp.speed;
      Gauge speed1 = new Gauge(10000.0, 0.0, speed, "SPEED (KM/H)", width/2 - width/4, 3*height/10, width/5);
      speed1.Draw_Gauge_Speed();
      
      
      //Distance Travelled
      float totalTravelledDistance = vroom.trip_comp.totalTravelledDistance;
      fill(0, 200, 0);
      textSize(20);
      text("ODOMETER: " + nf(totalTravelledDistance, 1, 2) + " KM", width/3, 3*height/5);
      
      
      //Fuel Levels
      float consumedFuel = vroom.fuel_tank.consumedFuel;
      Gauge fuelLevel1 = new Gauge(50, 47, sdpx.readFuelLevel(), "FUEL(LITRE)", width/2 + width/4, 3*height/10, width/5);
      fuelLevel1.Draw_Gauge_FUEL();
      fill(0, 200, 0);
      textSize(20);
      text("FUEL CONSUMPTION: " + nf(consumedFuel, 1, 2) + " LITRE/(100 KM)", 2*width/3, 3*height/5 + 20);
      
      
      //Fuel Economy
      float fuelEconomy = vroom.fuel_comp.fuelEconomy;
      float averageFuelEconomy = vroom.fuel_comp.averageFuelEconomy;
      fill(0, 200, 0);
      textSize(20);
      text("FUEL ECONOMY: " + nf(fuelEconomy, 1, 2) + " KM/LITRE", width/3, 3*height/5 + 20);
      
      
      //Range
      float range = vroom.fuel_comp.calculateRange(averageFuelEconomy, sdpx.readFuelLevel());
      fill(0, 200, 0);
      textSize(20);
      text("RANGE: " + nf(range, 1, 4) + " KM", 2*width/3, 3*height/5);
      
      
      //RPM
      Gauge rpm1 = new Gauge(2400, 600, sdpx.readRPM(), "RPM", width/2, 3*height/10, width/5);
      rpm1.Draw_Gauge_RPM();
      
      
      //Temp direction Gauge, probably requires a new function to find direction and a new gauge function to display properly
      Gauge time = new Gauge(1000, 0, sdpx.readTime(), "Time (s)", width/20, height/12, width/20);
      time.Draw_Gauge();
      
      
      //Barchart for Average Fuel Economy
      barChart = new BarChart(this);
      barChart.setData(vroom.fuel_comp.fuelEconomyHistoryChart);
      // Scaling
      barChart.setMinValue(0);
      barChart.setMaxValue(30);
      // Axis appearance
      textFont(createFont("Serif", 5), 10);
      barChart.showValueAxis(true); 
      barChart.setValueFormat("#"); 
      barChart.showCategoryAxis(true); 
      // Bar colours and appearance
      barChart.setBarColour(color(250, 100, 20, 200));
      barChart.setBarGap(5);
      barChart.draw(100, 550, 500, 180);
      // title
      fill(150, 50, 20);
      textSize(20);
      text("Average Fuel Economy (km/liter) over time (sec)", 350, 750);
      
      //Barchart for Fuel Consumption
      barChart = new BarChart(this);
      barChart.setData(vroom.fuel_tank.fuelConsumptionChart);
      
      // Scaling
      barChart.setMinValue(0);
      barChart.setMaxValue(0.01);
      
      // Axis appearance
      textFont(createFont("Serif", 5), 10);
      barChart.showValueAxis(true); 
      barChart.setValueFormat("#"); 
      barChart.showCategoryAxis(true); 
      
      // Bar colours and appearance
      barChart.setBarColour(color(250, 100, 20, 200));
      barChart.setBarGap(5);
      barChart.draw(750, 550, 500, 180);
      
      // title
      fill(150, 50, 20);
      textSize(20);
      text("Fuel Consumption (liter) over time (sec)", 990, 750);
      
      //FOR DEBUGGING
      //println("Time:", sdpx.readTime(),"Speed: " + speed , "km/hour", "  Distance Travelled: " + totalTravelledDistance + " KM", "  Fuel Consumed: " + consumedFuel + " litres", "  Fuel Economy: " + fuelEconomy + " KM/LITRE", "  Avg Fuel Economy: ", averageFuelEconomy, "  Range: " + range + " KM" );
      sdpx.readNext();
  }
    
    if (continueDraw == false)
    {
      noLoop();
    }
    
    // Code to stop draw if 3 is pressed
    if (quitFunction == true)
    {
      noLoop();
      exit();
    }
  
}
